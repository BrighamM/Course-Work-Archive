<map version="freeplane 1.2.0">
<!--To view this file, download free mind mapping software Freeplane from http://freeplane.sourceforge.net -->
<node TEXT="Sorting and Searching" ID="ID_1723255651" CREATED="1283093380553" MODIFIED="1440104202947"><hook NAME="MapStyle">
    <properties show_icon_for_attributes="true"/>

<map_styles>
<stylenode LOCALIZED_TEXT="styles.root_node">
<stylenode LOCALIZED_TEXT="styles.predefined" POSITION="right">
<stylenode LOCALIZED_TEXT="default" MAX_WIDTH="600" COLOR="#000000" STYLE="as_parent">
<font NAME="SansSerif" SIZE="10" BOLD="false" ITALIC="false"/>
</stylenode>
<stylenode LOCALIZED_TEXT="defaultstyle.details"/>
<stylenode LOCALIZED_TEXT="defaultstyle.note"/>
<stylenode LOCALIZED_TEXT="defaultstyle.floating">
<edge STYLE="hide_edge"/>
<cloud COLOR="#f0f0f0" SHAPE="ROUND_RECT"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.user-defined" POSITION="right">
<stylenode LOCALIZED_TEXT="styles.topic" COLOR="#18898b" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subtopic" COLOR="#cc3300" STYLE="fork">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.subsubtopic" COLOR="#669900">
<font NAME="Liberation Sans" SIZE="10" BOLD="true"/>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.important">
<icon BUILTIN="yes"/>
</stylenode>
</stylenode>
<stylenode LOCALIZED_TEXT="styles.AutomaticLayout" POSITION="right">
<stylenode LOCALIZED_TEXT="AutomaticLayout.level.root" COLOR="#000000">
<font SIZE="18"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,1" COLOR="#0033ff">
<font SIZE="16"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,2" COLOR="#00b439">
<font SIZE="14"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,3" COLOR="#990000">
<font SIZE="12"/>
</stylenode>
<stylenode LOCALIZED_TEXT="AutomaticLayout.level,4" COLOR="#111111">
<font SIZE="10"/>
</stylenode>
</stylenode>
</stylenode>
</map_styles>
</hook>
<hook NAME="AutomaticEdgeColor" COUNTER="2"/>
<node TEXT="Searching" POSITION="right" ID="ID_1312423698" CREATED="1440104211045" MODIFIED="1440104213122">
<edge COLOR="#0000ff"/>
<node TEXT="Search Problem" ID="ID_1356656498" CREATED="1440105235912" MODIFIED="1440105240763">
<node TEXT="Definition" ID="ID_589290201" CREATED="1440105243792" MODIFIED="1440105246218">
<node TEXT="In a collection of objects find one that matches some criteria" ID="ID_32572710" CREATED="1440105246231" MODIFIED="1440105295179"/>
<node TEXT="If you have a standard collection" ID="ID_1520437932" CREATED="1440105295663" MODIFIED="1440105303415">
<node TEXT="std::find" ID="ID_1853788201" CREATED="1440105303424" MODIFIED="1440105307424"/>
<node TEXT="std::find\_if" ID="ID_361399701" CREATED="1440105307686" MODIFIED="1440105314816"/>
</node>
</node>
<node TEXT="Uses" ID="ID_354040142" CREATED="1440105510135" MODIFIED="1440105515153">
<node TEXT="Often used with a collection of structures" ID="ID_1622050046" CREATED="1440105515164" MODIFIED="1440105539840">
<node TEXT="Part of the structure is what you search on (key)" ID="ID_1446482442" CREATED="1440105539857" MODIFIED="1440105550138"/>
<node TEXT="Part of the structure is what you are looking for (value)" ID="ID_1677669172" CREATED="1440105550598" MODIFIED="1440105558984"/>
</node>
</node>
</node>
<node TEXT="Linear Search" ID="ID_1977225385" CREATED="1440104467164" MODIFIED="1440104479594">
<node TEXT="Linear Search Algorithm" ID="ID_403062777" CREATED="1440105006761" MODIFIED="1440105439769">
<attribute NAME="textbook" VALUE="09-01"/>
<node TEXT="Sometimes called sequential search" ID="ID_549896659" CREATED="1440105062351" MODIFIED="1440105071107"/>
<node TEXT="Only requires a collection of objects" ID="ID_217462049" CREATED="1440105071574" MODIFIED="1440105090658"/>
<node TEXT="The obvious algorithm - look at every object untill you find what you are looking for" ID="ID_650310683" CREATED="1440105091150" MODIFIED="1440105232612"/>
</node>
<node TEXT="Linear Search Code" ID="ID_1542971560" CREATED="1441132502031" MODIFIED="1441132506167">
<node TEXT="Write linear search" ID="ID_203613833" CREATED="1441132506171" MODIFIED="1441132510125"/>
</node>
<node TEXT="Linear Search Code" LOCALIZED_STYLE_REF="styles.important" ID="ID_1164393365" CREATED="1440105486592" MODIFIED="1441131554181">
<node TEXT="bool find(int target,std::vector&lt;int&gt;&amp; container)" ID="ID_1342957033" CREATED="1441131419968" MODIFIED="1441131496658"/>
<node TEXT="{" ID="ID_1461326112" CREATED="1441131497567" MODIFIED="1441131499421"/>
<node TEXT="  for(auto&amp;&amp; e:container)" ID="ID_374079251" CREATED="1441131500039" MODIFIED="1441131511445"/>
<node TEXT="  {" ID="ID_1125362379" CREATED="1441131512015" MODIFIED="1441131515620"/>
<node TEXT="    if(e==target) return true;" ID="ID_1087712030" CREATED="1441131516575" MODIFIED="1441131541781"/>
<node TEXT="  }" ID="ID_517165601" CREATED="1441131529607" MODIFIED="1441131531324"/>
<node TEXT="  return false;" ID="ID_1874866483" CREATED="1441131531783" MODIFIED="1441131534692"/>
<node TEXT="}" ID="ID_259751366" CREATED="1441131535143" MODIFIED="1441131537012"/>
</node>
<node TEXT="std::find" LOCALIZED_STYLE_REF="styles.important" ID="ID_1104624830" CREATED="1441131573887" MODIFIED="1441131637958">
<node TEXT="std::vector&lt;int&gt; container;" ID="ID_1270981725" CREATED="1441131579171" MODIFIED="1441131601636"/>
<node TEXT="auto e = std::find(" ID="ID_48793439" CREATED="1441131602631" MODIFIED="1441131685703"/>
<node TEXT="  container.begin(),container.end(),target);" ID="ID_755746517" CREATED="1441131686183" MODIFIED="1441131689268"/>
</node>
<node TEXT="Linear Search Analysis" ID="ID_1702251969" CREATED="1441132219295" MODIFIED="1441132226751">
<node TEXT="How many steps does Linear Search take?" ID="ID_663287687" CREATED="1441132226755" MODIFIED="1441132237148"/>
<node TEXT="What order is the algorithm?" ID="ID_1375424814" CREATED="1441132237447" MODIFIED="1441132244709"/>
<node TEXT="Can we do better?" ID="ID_1190018863" CREATED="1441132245247" MODIFIED="1441132248574"/>
</node>
</node>
<node TEXT="Binary Search" ID="ID_170914193" CREATED="1440104480124" MODIFIED="1440104483216">
<node TEXT="Adding Requirements" ID="ID_825017112" CREATED="1440105459577" MODIFIED="1440105469795">
<node TEXT="If we require that the collection is in order we can do better." ID="ID_1525422613" CREATED="1440105469805" MODIFIED="1440105483908"/>
<node TEXT="Imagine: If I think of an integer 0-100 what strategy should you use to guess the number?" LOCALIZED_STYLE_REF="styles.topic" ID="ID_771640838" CREATED="1440105692752" MODIFIED="1441131766206"/>
<node TEXT="This requires that a collection is sorted but allows faster searching" ID="ID_661626515" CREATED="1440105736375" MODIFIED="1440105907056"/>
</node>
<node TEXT="Recursive Algorithm" ID="ID_329091957" CREATED="1440105913505" MODIFIED="1442843019769">
<attribute NAME="textbook" VALUE="14-05"/>
<node TEXT="Divide collection in half" ID="ID_1309268189" CREATED="1440105930326" MODIFIED="1440105947547"/>
<node TEXT="Use sorted condition to determine which half must contain value" ID="ID_586991987" CREATED="1440105947976" MODIFIED="1440105967858"/>
<node TEXT="Recurse into selected half" ID="ID_1521020827" CREATED="1440105968294" MODIFIED="1440105973759"/>
</node>
<node TEXT="Binary Search Code" ID="ID_687867500" CREATED="1441132486935" MODIFIED="1441132492343">
<node TEXT="Write binary search" ID="ID_386629711" CREATED="1441132492346" MODIFIED="1441132498156"/>
</node>
<node TEXT="Binary Search Code" LOCALIZED_STYLE_REF="styles.important" ID="ID_836114925" CREATED="1440105985182" MODIFIED="1441132023561">
<node TEXT="int find(int target,std::vector&lt;int&gt;&amp; container" ID="ID_1478829813" CREATED="1441131790895" MODIFIED="1441132078245"/>
<node TEXT="        ,int first,int last)" ID="ID_505717639" CREATED="1441132062727" MODIFIED="1441132097205"/>
<node TEXT="{" ID="ID_866105640" CREATED="1441131821415" MODIFIED="1441131822556"/>
<node TEXT="  //Did we find it?" ID="ID_1405749636" CREATED="1441132115079" MODIFIED="1441132128332"/>
<node TEXT="  auto mid = (first + last) / 2;" ID="ID_1866162669" CREATED="1441131822983" MODIFIED="1441131836524"/>
<node TEXT="  if(container[mid] == target) return mid;" ID="ID_1155305513" CREATED="1441131836935" MODIFIED="1441131854780"/>
<node TEXT="  //Is it not in collection - return -1" ID="ID_929930" CREATED="1441132132431" MODIFIED="1441132145012"/>
<node TEXT="  if(first &gt;= last) return -1;" ID="ID_725444512" CREATED="1441131875511" MODIFIED="1441132149381"/>
<node TEXT="  //Search appropriate half" ID="ID_1506421165" CREATED="1441132162743" MODIFIED="1441132172437"/>
<node TEXT="  if(container[mid] &lt; target)" ID="ID_111352755" CREATED="1441131933471" MODIFIED="1441131973665"/>
<node TEXT="    return find(target,container,mid+1,last);" ID="ID_1855509438" CREATED="1441131974279" MODIFIED="1441131998933"/>
<node TEXT="  return find(target,container,first,mid-1);" ID="ID_382757369" CREATED="1441131999511" MODIFIED="1441132013748"/>
<node TEXT="}" ID="ID_674327374" CREATED="1441132014167" MODIFIED="1441132015661"/>
</node>
<node TEXT="Binary Search Analysis" ID="ID_1838562587" CREATED="1441132219295" MODIFIED="1441132264485">
<node TEXT="How many steps does Linear Search take?" ID="ID_900044477" CREATED="1441132226755" MODIFIED="1441132237148"/>
<node TEXT="What order is the algorithm?" ID="ID_768683486" CREATED="1441132237447" MODIFIED="1441132244709"/>
</node>
<node TEXT="Linear v. Binary Search" ID="ID_1111114025" CREATED="1441132286327" MODIFIED="1441132297464">
<node TEXT="Which search algorithm is better?" ID="ID_1959280783" CREATED="1441132297467" MODIFIED="1441132304453"/>
<node TEXT="Why is it better?" LOCALIZED_STYLE_REF="styles.topic" ID="ID_1146318043" CREATED="1441132305159" MODIFIED="1441132331609"/>
<node TEXT="When is it better to sort and then do binary search?" LOCALIZED_STYLE_REF="styles.topic" ID="ID_1714010673" CREATED="1441132314263" MODIFIED="1441132362644"/>
<node TEXT="What do you need to know to answer correctly?" ID="ID_1535890685" CREATED="1441132351727" MODIFIED="1441132358453"/>
</node>
</node>
</node>
<node TEXT="Sorting" POSITION="right" ID="ID_1664721746" CREATED="1440104205334" MODIFIED="1440104210763">
<edge COLOR="#ff0000"/>
<node TEXT="Overview" ID="ID_451312536" CREATED="1440106079851" MODIFIED="1440106081845">
<node TEXT="Overview" ID="ID_1277607554" CREATED="1440106083355" MODIFIED="1440106087420">
<node TEXT="Binary search and other algorithms need a collection to be sorted" ID="ID_1099865274" CREATED="1440106087438" MODIFIED="1440106101773"/>
<node TEXT="Sorting is the method of determining how to order a collection" ID="ID_1629994316" CREATED="1440106102219" MODIFIED="1440106120418"/>
<node TEXT="Most often based on less than operator" ID="ID_272341517" CREATED="1440106120705" MODIFIED="1440106134762"/>
<node TEXT="std::sort" ID="ID_259869733" CREATED="1440106135241" MODIFIED="1440106139778"/>
<node TEXT="Needs a way to swap values - std::swap" ID="ID_932830984" CREATED="1440106482789" MODIFIED="1440106492214"/>
</node>
<node TEXT="Sort properties" ID="ID_573033275" CREATED="1440106198415" MODIFIED="1440106205151">
<node TEXT="In-place" ID="ID_1900680920" CREATED="1440106205163" MODIFIED="1440106209088">
<node TEXT="In place algorithms don&apos;t require extra memory" ID="ID_642067112" CREATED="1440106269780" MODIFIED="1440106290101"/>
</node>
<node TEXT="Stable" ID="ID_1737937136" CREATED="1440106209598" MODIFIED="1440106214503">
<node TEXT="Stable algorithms preserve order of `equal&apos; elements" ID="ID_750912228" CREATED="1440106291363" MODIFIED="1440106309069"/>
</node>
</node>
<node TEXT="Class Activity" ID="ID_494645407" CREATED="1441132418447" MODIFIED="1441132431207">
<node TEXT="Let&apos;s figure out how to sort things" ID="ID_1778774829" CREATED="1441132431211" MODIFIED="1441132442044"/>
</node>
</node>
<node TEXT="Quadratic Sorts" ID="ID_1633417942" CREATED="1440104726931" MODIFIED="1440104752734">
<node TEXT="Bubble Sort" ID="ID_1155957316" CREATED="1440106065420" MODIFIED="1440106068950">
<node TEXT="Scan through collection" ID="ID_741265239" CREATED="1440106383496" MODIFIED="1440106444046"/>
<node TEXT="If adjacent pairs are locally out of order swap them" ID="ID_1684462527" CREATED="1440106450126" MODIFIED="1440106477407"/>
</node>
<node TEXT="Bubble Sort Code" ID="ID_368619357" CREATED="1441132462223" MODIFIED="1441132466872">
<node TEXT="Write Bubble Sort" ID="ID_285078878" CREATED="1441132466875" MODIFIED="1441132476028"/>
</node>
<node TEXT="Bubble Sort Code" LOCALIZED_STYLE_REF="styles.important" ID="ID_1999198081" CREATED="1441132477199" MODIFIED="1441132898720">
<node TEXT="void bubbleSort(std::vector&lt;int&gt; c)" ID="ID_1595405264" CREATED="1441132724018" MODIFIED="1441132748030"/>
<node TEXT="{" ID="ID_1909832256" CREATED="1441132748335" MODIFIED="1441132750052"/>
<node TEXT="  auto done = false;" ID="ID_1329563327" CREATED="1441132750343" MODIFIED="1441132757237"/>
<node TEXT="  while(!done)" ID="ID_533898240" CREATED="1441132757663" MODIFIED="1441132762516"/>
<node TEXT="  {" ID="ID_1324017762" CREATED="1441132762887" MODIFIED="1441132764957"/>
<node TEXT="    done = true;" ID="ID_160803761" CREATED="1441132765367" MODIFIED="1441132770412"/>
<node TEXT="    for(auto i=0u;i&lt;c.size()-1;++i)" ID="ID_1648905455" CREATED="1441132770999" MODIFIED="1441132795989"/>
<node TEXT="    {" ID="ID_106802484" CREATED="1441132796455" MODIFIED="1441132800516"/>
<node TEXT="      if(c[i]&gt;c[i+1])" ID="ID_2925473" CREATED="1441132801143" MODIFIED="1441132819182"/>
<node TEXT="      {" ID="ID_35110248" CREATED="1441132819847" MODIFIED="1441132825493"/>
<node TEXT="        std::swap(c[i],c[i+1]);" ID="ID_1398185181" CREATED="1441132825927" MODIFIED="1441132843357"/>
<node TEXT="        done = false;" ID="ID_688521476" CREATED="1441132844143" MODIFIED="1441132852245"/>
<node TEXT="      }" ID="ID_1405108488" CREATED="1441132852823" MODIFIED="1441132855932"/>
<node TEXT="    }" ID="ID_25185686" CREATED="1441132856903" MODIFIED="1441132860197"/>
<node TEXT="  }" ID="ID_457657490" CREATED="1441132860903" MODIFIED="1441132862725"/>
<node TEXT="}" ID="ID_73257796" CREATED="1441132863151" MODIFIED="1441132864013"/>
</node>
<node TEXT="Bubble Sort Analysis" ID="ID_818130283" CREATED="1441132965033" MODIFIED="1441132972594">
<node TEXT="Is the sort stable?" ID="ID_1198335636" CREATED="1441132972602" MODIFIED="1441132977929"/>
<node TEXT="Is the sort in place?" ID="ID_1480932406" CREATED="1441132978208" MODIFIED="1441132983791"/>
<node TEXT="What order is the sort algorithm?" ID="ID_1510555606" CREATED="1441132984137" MODIFIED="1441132990797"/>
</node>
<node TEXT="Insertion Sort" ID="ID_1458387983" CREATED="1440106069515" MODIFIED="1440106072750">
<node TEXT="Have a sorted collection - initially empty" ID="ID_1153932191" CREATED="1440106687077" MODIFIED="1440106701763"/>
<node TEXT="Insert each not yet sorted value at the correct spot" ID="ID_1458083488" CREATED="1440106702020" MODIFIED="1440106772286"/>
</node>
<node TEXT="Insertion Sort Code" ID="ID_1578534837" CREATED="1441133003225" MODIFIED="1441133007361">
<node TEXT="Write Insertion Sort" ID="ID_1782321259" CREATED="1441142142329" MODIFIED="1441142147606"/>
</node>
<node TEXT="Insertion Sort Code" LOCALIZED_STYLE_REF="styles.important" ID="ID_1731409689" CREATED="1441142149610" MODIFIED="1441142459766">
<node TEXT="void insertionSort(std::vector&lt;int&gt;&amp; c)" ID="ID_139987281" CREATED="1441142154839" MODIFIED="1441142165728"/>
<node TEXT="{" ID="ID_836689548" CREATED="1441142166202" MODIFIED="1441142167727"/>
<node TEXT="  for(auto i=1;i&lt;c.size();++i)" ID="ID_297785676" CREATED="1441142168177" MODIFIED="1441142332179"/>
<node TEXT="  {" ID="ID_1457466710" CREATED="1441142181865" MODIFIED="1441142184479"/>
<node TEXT="    for(auto j=0;j&lt;i;++j)" ID="ID_195315584" CREATED="1441142185033" MODIFIED="1441142345659"/>
<node TEXT="    {" ID="ID_220834828" CREATED="1441142249091" MODIFIED="1441142253391"/>
<node TEXT="      if(c[j] &lt; c[i]) std::swap(c[j],c[i]);" ID="ID_1336235717" CREATED="1441142254956" MODIFIED="1441142312635"/>
<node TEXT="    }" ID="ID_1359320758" CREATED="1441142312995" MODIFIED="1441142316043"/>
<node TEXT="  }" ID="ID_1241619546" CREATED="1441142316484" MODIFIED="1441142318059"/>
<node TEXT="}" ID="ID_687864311" CREATED="1441142318362" MODIFIED="1441142319104"/>
</node>
<node TEXT="Insertion Sort Analysis" ID="ID_367806958" CREATED="1441132965033" MODIFIED="1441133029237">
<node TEXT="Is the sort stable?" ID="ID_1707639455" CREATED="1441132972602" MODIFIED="1441132977929"/>
<node TEXT="Is the sort in place?" ID="ID_1320208599" CREATED="1441132978208" MODIFIED="1441132983791"/>
<node TEXT="What order is the sort algorithm?" ID="ID_1350063483" CREATED="1441132984137" MODIFIED="1441132990797"/>
</node>
<node TEXT="Selection Sort" ID="ID_530711207" CREATED="1440106073228" MODIFIED="1440106075869">
<node TEXT="Have a sorted collection - initially empty" ID="ID_855658720" CREATED="1440106773978" MODIFIED="1440106786883"/>
<node TEXT="Insert the smallest unsorted element" ID="ID_1148310305" CREATED="1440106787338" MODIFIED="1440106799056"/>
</node>
<node TEXT="Selection Sort Code" ID="ID_1714140791" CREATED="1441141422195" MODIFIED="1441141427510">
<node TEXT="Write Selection Sort" ID="ID_665051319" CREATED="1441141428665" MODIFIED="1441141434142"/>
</node>
<node TEXT="Selection Sort Code - min" LOCALIZED_STYLE_REF="styles.important" ID="ID_1567177329" CREATED="1441141435291" MODIFIED="1441141749236">
<node TEXT="int min(std::vector&lt;int&gt;&amp; c,int start)" ID="ID_179154538" CREATED="1441141441220" MODIFIED="1441141469195"/>
<node TEXT="{" ID="ID_52289076" CREATED="1441141469730" MODIFIED="1441141471299"/>
<node TEXT="  auto min = std::numeric_limits&lt;int&gt;::max();" ID="ID_1258298984" CREATED="1441141494531" MODIFIED="1441141585939"/>
<node TEXT="  auto cur = -1;" ID="ID_1144774473" CREATED="1441141594264" MODIFIED="1441141608874"/>
<node TEXT="  for(auto i=start;i&lt;c.size();++i)" ID="ID_896336852" CREATED="1441141474739" MODIFIED="1441141826987"/>
<node TEXT="  {" ID="ID_1034042456" CREATED="1441141588468" MODIFIED="1441141613335"/>
<node TEXT="    if(min &gt; c[i])" ID="ID_1609727618" CREATED="1441141613995" MODIFIED="1441141651835"/>
<node TEXT="    {" ID="ID_1689326302" CREATED="1441141652363" MODIFIED="1441141654488"/>
<node TEXT="      min = c[i];" ID="ID_460158791" CREATED="1441141655347" MODIFIED="1441141664318"/>
<node TEXT="      cur = i;" ID="ID_475689562" CREATED="1441141665146" MODIFIED="1441141671731"/>
<node TEXT="    }" ID="ID_232190766" CREATED="1441141672298" MODIFIED="1441141677954"/>
<node TEXT="  }" ID="ID_129668556" CREATED="1441141678571" MODIFIED="1441141681322"/>
<node TEXT="  return cur;" ID="ID_1190891013" CREATED="1441141681819" MODIFIED="1441141685138"/>
<node TEXT="}" ID="ID_1089332415" CREATED="1441141471883" MODIFIED="1441141473699"/>
</node>
<node TEXT="Selection Sort Code - sort" LOCALIZED_STYLE_REF="styles.important" ID="ID_146652397" CREATED="1441141750355" MODIFIED="1441141891858">
<node TEXT="void selectionSort(std::vector&lt;int&gt;&amp; c)" ID="ID_1623305421" CREATED="1441141757323" MODIFIED="1441141770930"/>
<node TEXT="{" ID="ID_1465447710" CREATED="1441141771644" MODIFIED="1441141772995"/>
<node TEXT="  for(auto i = 0;i&lt;c.size();++i)" ID="ID_1609544841" CREATED="1441141773491" MODIFIED="1441141819347"/>
<node TEXT="  {" ID="ID_951740322" CREATED="1441141830651" MODIFIED="1441141836848"/>
<node TEXT="    auto smallest = min(c,i);" ID="ID_1217969749" CREATED="1441141837314" MODIFIED="1441141853859"/>
<node TEXT="    std::swap(c[i],c[smallest]);" ID="ID_1419616886" CREATED="1441141854458" MODIFIED="1441141868491"/>
<node TEXT="  }" ID="ID_1637306875" CREATED="1441141869058" MODIFIED="1441141871552"/>
<node TEXT="}" ID="ID_1227206653" CREATED="1441141872033" MODIFIED="1441141873299"/>
</node>
<node TEXT="Selection Sort Analysis" ID="ID_1552727054" CREATED="1441132965033" MODIFIED="1441133038289">
<node TEXT="Is the sort stable?" ID="ID_810049816" CREATED="1441132972602" MODIFIED="1441132977929"/>
<node TEXT="Is the sort in place?" ID="ID_884543110" CREATED="1441132978208" MODIFIED="1441132983791"/>
<node TEXT="What order is the sort algorithm?" ID="ID_1590318325" CREATED="1441132984137" MODIFIED="1441132990797"/>
</node>
</node>
<node TEXT="Loglinear Sorts" ID="ID_1095982368" CREATED="1440104732218" MODIFIED="1440104748597">
<node TEXT="Lower Bound on Comparison Sorts" ID="ID_692758713" CREATED="1441143223154" MODIFIED="1441143230223">
<node TEXT="We can model all possible comparison based sorting algorithms" ID="ID_329870897" CREATED="1441143393802" MODIFIED="1441143414343"/>
<node TEXT="This allows us to prove what the best possible algorithm for sorting might look like" LOCALIZED_STYLE_REF="styles.topic" ID="ID_28117016" CREATED="1441143415434" MODIFIED="1441143513076"/>
<node TEXT="The model is a decision tree" ID="ID_783055373" CREATED="1441143480306" MODIFIED="1441143486666">
<node TEXT="Nodes of the tree are possible states" ID="ID_578308770" CREATED="1441143486670" MODIFIED="1441143497199"/>
<node TEXT="Edges are possible actions" ID="ID_1149532887" CREATED="1441143497682" MODIFIED="1441143504799"/>
<node TEXT="Each node has at most two possible actions (the comparison is true or false)" ID="ID_1573566909" CREATED="1441143579914" MODIFIED="1441143595511"/>
</node>
<node TEXT="The states of sorting are permutations of the input" ID="ID_952301601" CREATED="1441143517090" MODIFIED="1441143535719"/>
<node TEXT="A general algorithm must contain every permutation" ID="ID_139307323" CREATED="1441143536290" MODIFIED="1441143554175"/>
<node TEXT="The height of the tree is the number of steps necessary" ID="ID_161250644" CREATED="1441143554474" MODIFIED="1441143565200"/>
</node>
<node TEXT="Lower Bound Proof" ID="ID_1533097159" CREATED="1441143597986" MODIFIED="1441143609443">
<node TEXT="A sequence of $n$ elements has $n!$ permutations" ID="ID_485990460" CREATED="1441143609447" MODIFIED="1441143675616"/>
<node TEXT="The height of a binary tree is $\log_2 n$ if it has $n$ elements" ID="ID_147071014" CREATED="1441143636466" MODIFIED="1441143664665"/>
<node TEXT="$n! &lt; n^n$" ID="ID_412061012" CREATED="1441143676690" MODIFIED="1441143702279"/>
<node TEXT="$\log_2 n! = O(n \log_2 n)$" ID="ID_1331538893" CREATED="1441143704402" MODIFIED="1441143733679"/>
<node TEXT="The best possible comparison based sorting algorithm is $O(n \log n)$" ID="ID_348506021" CREATED="1441143734930" MODIFIED="1441143756719"/>
<node TEXT="All of the algorithms we have looked at so far are $O(n^2)$" ID="ID_228686122" CREATED="1441143757394" MODIFIED="1441143775263"/>
</node>
<node TEXT="Recursive Sorting" ID="ID_1028691405" CREATED="1440106826745" MODIFIED="1440106838933">
<node TEXT="The $O(n \log n)$ algorithms are recursive" ID="ID_1986553341" CREATED="1441144574330" MODIFIED="1441144592603"/>
<node TEXT="Recursive algorithms need a base case" ID="ID_96640019" CREATED="1441144593098" MODIFIED="1441144624421"/>
<node TEXT="What should we use for sorting?" ID="ID_913667060" CREATED="1441144624970" MODIFIED="1441144700200"/>
<node TEXT="Base cases should have no work left -- a single item is trivially sorted" ID="ID_899261141" CREATED="1441144700898" MODIFIED="1441144714631"/>
</node>
<node TEXT="Merge Sort" ID="ID_1643196750" CREATED="1440106181135" MODIFIED="1440106183952">
<node TEXT="A list can be divided into two lists in $O(1)$ time" ID="ID_1327347254" CREATED="1441144750362" MODIFIED="1441145091767"/>
<node TEXT="Two sorted lists can be merged into one sorted list in $O(n)$ time" ID="ID_1780513199" CREATED="1441144720914" MODIFIED="1441144747408"/>
<node TEXT="A list of size 1 is sorted" ID="ID_532070350" CREATED="1441145098959" MODIFIED="1441145106191"/>
</node>
<node TEXT="Merge Sort Code" ID="ID_543007703" CREATED="1441145107698" MODIFIED="1441145111786">
<node TEXT="Use these ideas to build a $O(n \log n)$ sorting algorithm" ID="ID_368181274" CREATED="1441145111790" MODIFIED="1441145133647"/>
</node>
<node TEXT="Merge Sort Code - merge" LOCALIZED_STYLE_REF="styles.important" ID="ID_1736599870" CREATED="1441145147275" MODIFIED="1441145225433">
<node TEXT="std::vector&lt;int&gt; merge(" ID="ID_1754614027" CREATED="1441145154359" MODIFIED="1441145276851"/>
<node TEXT="  std::vector&lt;int&gt;&amp; a,std::vector&lt;int&gt;&amp; b) {" ID="ID_1637401712" CREATED="1441145277354" MODIFIED="1441148933489"/>
<node TEXT="  auto i = 0; auto j=0; std::vector&lt;int&gt; res;" ID="ID_1375424501" CREATED="1441145322322" MODIFIED="1441148903236"/>
<node TEXT="  res.reserve(a.size() + b.size());" ID="ID_1366450736" CREATED="1441145424018" MODIFIED="1441145434936"/>
<node TEXT="  while(i&lt;a.size() &amp;&amp; j&lt;b.size()) {" ID="ID_1461283174" CREATED="1441145337386" MODIFIED="1441148938317"/>
<node TEXT="    if(a[i] &lt; b[j])" ID="ID_1083451760" CREATED="1441145473674" MODIFIED="1441145486360"/>
<node TEXT="    { res.push_back(a[i]); ++i; }" ID="ID_629163846" CREATED="1441145486963" MODIFIED="1441148983842"/>
<node TEXT="    else" ID="ID_1469426574" CREATED="1441145500466" MODIFIED="1441145510474"/>
<node TEXT="    { res.push_back(b[j]);  ++j; }" ID="ID_255148006" CREATED="1441145503114" MODIFIED="1441148690408"/>
<node TEXT="  }" ID="ID_240011615" CREATED="1441148695595" MODIFIED="1441148701219"/>
<node TEXT="  if(i&lt;a.size()) {" ID="ID_1758841988" CREATED="1441148766421" MODIFIED="1441148997629"/>
<node TEXT="    for(auto k=i;k&lt;a.size();++k)" ID="ID_1863577928" CREATED="1441148853307" MODIFIED="1441149091661"/>
<node TEXT="    res.push_back(a[k]); }" ID="ID_1653491438" CREATED="1441149000493" MODIFIED="1441149031643"/>
<node TEXT="  else {" ID="ID_1383803284" CREATED="1441148868524" MODIFIED="1441149070091"/>
<node TEXT="    for(auto k=j;k&lt;b.size();++k)" ID="ID_255758608" CREATED="1441148853307" MODIFIED="1441149088218"/>
<node TEXT="    res.push_back(b[k]); }" ID="ID_149615417" CREATED="1441149000493" MODIFIED="1441149079777"/>
<node TEXT="}" ID="ID_1672939529" CREATED="1441148712123" MODIFIED="1441148713216"/>
</node>
<node TEXT="Merge Sort Analysis" ID="ID_721502050" CREATED="1442362404488" MODIFIED="1442362411272">
<node TEXT="Is the sort stable?" ID="ID_339129832" CREATED="1442362411281" MODIFIED="1442362417283"/>
<node TEXT="Is the sort in place?" ID="ID_1930037412" CREATED="1442362417781" MODIFIED="1442362421862"/>
<node TEXT="What order is the algorithm?" ID="ID_931881745" CREATED="1442362425316" MODIFIED="1442362431184"/>
</node>
<node TEXT="Quick Sort" ID="ID_602844682" CREATED="1440106184222" MODIFIED="1442843041893">
<attribute NAME="textbook" VALUE="14-06"/>
<node TEXT="A \emph{pivot} can be chosen in $O(1)$ time" ID="ID_705647566" CREATED="1442362572750" MODIFIED="1442362620968"/>
<node TEXT="A list can be partitioned into the set less than the pivot and the set greater than the pivot in $O(n)$ time" ID="ID_957851132" CREATED="1442362621861" MODIFIED="1442362797643"/>
<node TEXT="A list of size  is sorted" ID="ID_928723622" CREATED="1442362691611" MODIFIED="1442362741333"/>
</node>
<node TEXT="Quick Sort Code" ID="ID_86743615" CREATED="1442362742393" MODIFIED="1442362747138">
<node TEXT="Use these ideas to build a $O(n \log n)$ algorithm" ID="ID_1289966357" CREATED="1442362747149" MODIFIED="1442362769373"/>
<node TEXT="If you don&apos;t choose the pivot well this is $O(n^2)$" ID="ID_512675177" CREATED="1442362769855" MODIFIED="1442362789941"/>
</node>
<node TEXT="Quick Sort Code - Choose Pivot" ID="ID_1080338287" CREATED="1442362799839" MODIFIED="1442362809961"/>
<node TEXT="Quick Sort Code - Partition" ID="ID_1422787578" CREATED="1442362810742" MODIFIED="1442362820753"/>
<node TEXT="Quick Sort Code" ID="ID_1311511960" CREATED="1442362825558" MODIFIED="1442362828888"/>
<node TEXT="Quick Sort Analysis" ID="ID_1935187692" CREATED="1442377664814" MODIFIED="1442377681168">
<node TEXT="Is the sort stable?" ID="ID_1682685243" CREATED="1442377681183" MODIFIED="1442377686355"/>
<node TEXT="Is the sort in place?" ID="ID_612155386" CREATED="1442377687366" MODIFIED="1442377691295"/>
<node TEXT="What order is the algorithm?" ID="ID_837878380" CREATED="1442377691782" MODIFIED="1442377696894"/>
</node>
</node>
</node>
</node>
</map>
