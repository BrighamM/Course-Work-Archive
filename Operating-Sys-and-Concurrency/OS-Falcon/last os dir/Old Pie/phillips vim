

https://github.com/PhilipNelson5/vimrc/blob/master/.vimrc

Skip to content
Personal Open source Business Explore
Sign upSign inPricingBlogSupport
This repository
Search
 Watch 1  Star 0  Fork 0 PhilipNelson5/vimrc
 Code  Issues 0  Pull requests 0  Projects 0  Pulse  Graphs
Branch: master Find file Copy pathvimrc/.vimrc
4de9ffa  24 minutes ago
@PhilipNelson5 PhilipNelson5 stuff
1 contributor
RawBlameHistory    
346 lines (279 sloc)  8.91 KB
" reload .vimrc"
nnoremap <leader>rv :source $MYVIMRC<CR>

" easy access to vimrc
noremap <F12>  <Esc>:tabnew $MYVIMRC<CR>

"draw line at the 81st column
"let &colorcolumn=join(range(82,999),",")
"let &colorcolumn="81,".join(range(400,999),",")

" copy and replace-paste
nmap <C-c> "cyiw
nmap <C-p> viw"cp

" some good basic stuff
set shortmess=atI  " No help Uganda information
set incsearch      " Find as you type search
set nohlsearch       " Highlight search terms
set ignorecase     " Case sensitive search
set smartcase      " Case sensitive when uc present
set autoread       " Automatically read a file changed outside of vim
set autowrite      " Automatically write a file when leaving a modified buffer
set hidden         " Allow buffer switching without saving
set showcmd        " Show partial commands in status line and Selected characters/lines in visual mode
set showmode       " Display current mode
"set showmatch      " Show matching brackets/parentthesis
set matchtime=5    " Show matching time
set laststatus=2   " Always show status line
filetype plugin indent on      " Automatically detect file types
set linespace=0                " No extra spaces between rows
set backspace=indent,eol,start " Backspace for dummies

set winminheight=0
set wildmode=list:longest,full
set wildmenu

set listchars=tab:→\ ,eol:↵,trail:·,extends:↷,precedes:↶

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936

set wildignore+=*swp,*.class,*.pyc,*.png,*.jpg,*.gif,*.zip
set wildignore+=*/tmp/*,*.o,*.obj,*.so     " Unix
set wildignore+=*\\tmp\\*,*.exe            " Windows

set history=10000

if has('clipboard')
	set clipboard=unnamed
endif

if has('persistent_undo')
	set undofile             " Persistent undo
	set undolevels=1000      " Maximum number of changes that can be undone
	set undoreload=10000     " Maximum number lines to save for undo on a buffer reload
endif


vnoremap < <gv
vnoremap > >gv

" minimize vim and show terminal
map <leader>e <Esc>:sh<CR>

" auto curly braces
imap <F2> {<Esc>o}<Esc>O

" auto capitalize WORD
inoremap <C-u> <esc>mzgUiw`za

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

set ttyfast

" Navigate properly when lines are wrapped
nnoremap j gj
nnoremap k gk

" scroll buffer up/down with active line in middle
nnoremap J jzz
nnoremap K kzz

" 'COPE'ing with your problems
noremap <F4> :cn<CR>zz

" redraw only when we need to.
set lazyredraw 

"--------------[mouse/scroll]---------------"
map <ScrollWheelUp> 2<C-Y>
map <ScrollWheelDown> 2<C-E>
set mouse=a        " Enable mouse usage
set mousehide      " Hide the mouse cursor while typing

"---------------spell check]---------------"
set spell spelllang=en_us
hi clear SpellBad
hi SpellBad cterm=underline
" change misspelled word
nnoremap z<Space> z=
" go to next/previous misspelled word
nnoremap zn ]s
nnoremap zN [s

"--------------[line numbers]---------------"
set number
set numberwidth=4

" Toggle relative numbering, and set to absolute on loss of focus or insert mode
"set rnu
"function! ToggleNumbersOn()
"	set nu!
"	set rnu
"endfunction
"function! ToggleRelativeOn()
"	set rnu!
"	set nu
"endfunction
"autocmd FocusLost * call ToggleRelativeOn()
"autocmd FocusGained * call ToggleRelativeOn()
"autocmd InsertEnter * call ToggleRelativeOn()
"autocmd InsertLeave * call ToggleRelativeOn()
set nornu

set ruler
" Only show cursorline in the current window and in normal mode.
augroup cline
	au!
	au WinLeave,InsertEnter * set nocursorline
	au WinEnter,InsertLeave * set cursorline
augroup END

"------------------[Tabs]-------------------"
set smartindent
set smarttab
set tabstop=2
set softtabstop=2 
set shiftwidth=2
set noexpandtab

" fix indentation
nmap <F7> mzgg=G`zzz
imap <F7> <Esc>mzgg=G`zzza

" sort lines
noremap S :sort<CR>

" Clang Format
map <C-x> :pyf <'%:p'>/clang-format.py<cr>
imap <C-K> <c-o>:pyf <path-to-this-file>/clang-format.py<cr>

"-----------[Syntax Highlighting]-----------"
syntax enable
colorscheme solarized
let g:solarized_termcolors=16
set background=dark

"colorscheme mod8

"-----------------[Window]------------------"
" switch window
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" move windows
nnoremap <C-A-S-Right> <C-w>L
nnoremap <C-A-S-Left> <C-w>H
nnoremap <C-A-S-Up> <C-w>K
nnoremap <C-A-S-Down> <C-w>J

" resize window
nnoremap <silent> <C-Right> :vertical resize +5<CR>
nnoremap <silent> <C-Left> :vertical resize -5<CR>
nnoremap <silent> <C-Up> :resize +5<CR>
nnoremap <silent> <C-Down> :resize -5<CR>

nnoremap <silent> <C-S-Right> :vertical resize +1<CR>
nnoremap <silent> <C-S-Left> :vertical resize -1<CR>
nnoremap <silent> <C-S-Up> :resize +1<CR>
nnoremap <silent> <C-S-Down> :resize -1<CR>

" natural splits
set splitbelow
set splitright

"----------------[Window Tabs]--------------"
" Show tab line when >1 tab open
set showtabline=1

" To open a new empty tab
nmap <leader>t :tabnew<CR>

" Move to the next tab
nmap <Space>l :tabnext<CR>

" Move to the previous tab
nmap <Space>h :tabprevious<CR>

" Close the current tab and move to the previous one
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>

"-----------------[Buffers]-----------------"
" Next buffer
nmap <F10> :bn<CR>
nmap <C-F10> :bp<CR>

"--------------[Tab Completion]-------------"
set dictionary=/usr/share/dict/words
inoremap <S-Tab> <C-P>
set complete=.,w,b,u,t,i
set completeopt=menu,preview
filetype plugin on
set omnifunc=syntaxcomplete#Complete

"--------[normal enter/backspace key]-------"
"Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>
nnoremap <BS> i<BS><Esc>l
"Below is to fix issues with the ABOVE mappings in quick fix window"
autocmd CmdwinEnter * nnoremap <CR> <CR>
autocmd BufReadPost quickfix nnoremap <CR> <CR>

"-----------------[saving]-----------------"
" Map Ctrl + S to save in any mode
noremap <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>

" Map F3 to save all and make
nmap <F3> :wa<CR> :make<CR>
imap <F3> <ESC>:wa<CR> :make<CR>

set laststatus=2
set ttimeoutlen=50
set encoding=utf-8

"------------[Filetype Specific]-----------"
augroup configgroup
	autocmd!
	autocmd FileType tex nmap <F3> :w<CR> :!latex '%:t'<CR>

augroup END

"----------------[vim-plug]----------------"
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'scrooloose/syntastic'
call plug#end()

"------------------[NERDTree]-----------------"
nnoremap <C-n> :NERDTreeToggle<CR>

" closes NERDTree if last window opn
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" open NERDTree if no file was opened
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"---------------[Octol Highlight]-------------"
let g:cpp_class_scope_highlight = 1
let g:cpp_experimental_template_highlight = 1

"------------------[Airline]------------------"
let g:airline#extensions#tabline#enabled = 2
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" customization's


let g:airline_powerline_fonts = 1
let g:airline_theme='powerlineish'

""-----------------[syntastic]-----------------"
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"
"----------------[LaTeX-Suite]----------------"
filetype plugin on
set grepprg=grep\ -nH\ $*
filetype indent on
let g:tex_flavor='latex'
set sw=2
set iskeyword+=:

" Pipe console output to scratch buffer
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
	let isfirst = 1
	let words = []
	for word in split(a:cmdline)
		if isfirst
			let isfirst = 0  " don't change first word (shell command)
		else
			if word[0] =~ '\v[%#<]'
				let word = expand(word)
			endif
			let word = shellescape(word, 1)
		endif
		call add(words, word)
	endfor
	let expanded_cmdline = join(words)
	botright new
	setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
	call setline(1, 'You entered:  ' . a:cmdline)
	call setline(2, 'Expanded to:  ' . expanded_cmdline)
	call append(line('$'), substitute(getline(2), '.', '=', 'g'))
	silent execute '$read !'. expanded_cmdline
	1
endfunction
Contact GitHub API Training Shop Blog About
© 2017 GitHub, Inc. Terms Privacy Security Status Help